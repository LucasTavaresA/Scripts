#!/usr/bin/env sh
status=""
status () {
    status="$status$1 $2!  $3\n"
}

heading () {
    echo
    cols=$(tput cols)
    center=$((cols/2))
    header="$1"
    headersize="${#header}"
    indent=$((center-(headersize/2)))
    meio=0

    i=0
    while [ $i -lt $cols ]; do
        if [ $i -lt $indent ]; then
            col="${col}─"
        elif [ $i -gt $((indent+2+headersize)) ]; then
            col="${col}─"
        elif [ $meio = 0 ]; then
            col="${col} $header "
            meio=1
        fi

        i=$((i+1))
    done

    echo "$col"
    col=""
    echo
}

update_packages () {
    if [ "$OS" = "archlinux" ] || [ "$OS" = "artixlinux" ] || [ "$OS" = "manjaro" ] || [ "$OS" = "archlinux" ]; then
        heading PACKAGES
        if command -v paru > /dev/null; then
            paru -Pw
            paru --color always -Syu && status packages OK || status packages XX
        else
            doas pacman --color always -Syu && status packages OK || status packages XX
        fi
    elif [ "$OS" = "voidlinux" ]; then
        heading PACKAGES
        doas xbps-install -Su && status packages OK || status packages XX
    elif [ "$OS" = "linuxmint" ]; then
        heading PACKAGES
        doas apt update && doas apt upgrade && status packages OK || status packages XX
    fi
}

update_etc () {
    if [ "$OS" = "archlinux" ] || [ "$OS" = "artixlinux" ] || [ "$OS" = "manjaro" ] || [ "$OS" = "archlinux" ]; then
        if command -v pacdiff > /dev/null; then
            heading ETC
            doas pacdiff && status etc OK || status etc XX
        else
            status etc XX "Instale pacman-contrib!"
        fi
    fi
}

update_nodejs () {
    if command -v node > /dev/null; then
        if command -v yarn > /dev/null; then
            heading YARN
            yarn global update && status nodejs OK || status nodejs XX
        elif command -v npm > /dev/null; then
            heading NPM
            if npm root -g | grep $HOME; then
                npm update -g && status nodejs OK || status nodejs XX
            fi
        else
            status nodejs XX "Instale o yarn ou npm!"
        fi
    fi
}

update_pip () {
    if command -v python > /dev/null; then
        if command -v pip > /dev/null; then
            heading PIP
            pip install $(pip freeze | sed 's/==/>=/;/.*@.*$/d') --upgrade && status pip OK || status pip XX
        else
            status pip XX "Instale o pip!"
        fi
    fi
}

update_nvim () {
    if command -v nvim > /dev/null; then
        heading NEOVIM
        nvim --headless +PaqSync +qa && status nvim OK || status nvim XX
    fi
}

update_fish () {
    if command -v fish > /dev/null; then
        heading FISH
        if command -v cargo-install-update > /dev/null; then
            fish -c "fisher update" && status fish OK || status fish XX
        else
            status fish XX "Instale o fisher!"
        fi
    fi
}

update_cargo () {
    if command -v cargo > /dev/null; then
        heading CARGO
        if command -v cargo-install-update > /dev/null; then
            cargo install-update -a 2> /dev/null && status cargo OK || status cargo xx
        else
            status cargo xx "Instale o cargo-update!"
        fi
    fi
}

update_flatpak () {
    if command -v flatpak > /dev/null; then
        heading FLATPAK
        flatpak update && status flatpak OK || status flatpak xx
    fi
}

update_snap () {
    if command -v snap > /dev/null; then
        heading SNAP
        doas snap refresh && status snap OK || status snap xx
    fi
}

update_packages
update_etc
update_nodejs
update_pip
update_nvim
update_fish
update_cargo
update_flatpak
update_snap

heading ATUALIZADO
echo "$status"
